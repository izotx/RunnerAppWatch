//
//  RunnerGraphicsStyleKit.swift
//  ProjectName
//
//  Created by Janusz Chudzynski on 1/31/15.
//  Copyright (c) 2015 izotx.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class RunnerGraphicsStyleKit : NSObject {
    
    //// Drawing Methods
    
    public class func drawTwoLabels(#bottomLabelText: String, mainFrame: CGRect, topLabelText: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)
        
        //// Variable Declarations
        let topLabelFontSize: CGFloat = mainFrame.size.height / 3.30
        let bottomLabelExpression: CGFloat = mainFrame.size.height / 9.0
        
        //// Frames
        let frame = CGRectMake(mainFrame.origin.x, mainFrame.origin.y, mainFrame.size.width, mainFrame.size.height)
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.23878 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.76115 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.97288 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.76115 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.23878 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        shapeBaseColor.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// topLabelCG Drawing
        let topLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.07007 + 0.5), view_container.minY + floor(view_container.height * 0.20694 - 0.11) + 0.61, floor(view_container.width * 0.93095 + 0.5) - floor(view_container.width * 0.07007 + 0.5), floor(view_container.height * 0.60078 - 0.11) - floor(view_container.height * 0.20694 - 0.11))
        let topLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        topLabelCGStyle.alignment = NSTextAlignment.Center
        
        let topLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: topLabelFontSize)!, NSForegroundColorAttributeName: whiteRectColor, NSParagraphStyleAttributeName: topLabelCGStyle]
        
        let topLabelCGTextHeight: CGFloat = NSString(string: topLabelText).boundingRectWithSize(CGSizeMake(topLabelCGRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: topLabelCGFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, topLabelCGRect);
        NSString(string: topLabelText).drawInRect(CGRectMake(topLabelCGRect.minX, topLabelCGRect.minY + (topLabelCGRect.height - topLabelCGTextHeight) / 2, topLabelCGRect.width, topLabelCGTextHeight), withAttributes: topLabelCGFontAttributes)
        CGContextRestoreGState(context)
        
        
        //// bottomLabelCG Drawing
        let bottomLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.17685 + 0.5), view_container.minY + floor(view_container.height * 0.60078 - 0.11) + 0.61, floor(view_container.width * 0.84086 + 0.5) - floor(view_container.width * 0.17685 + 0.5), floor(view_container.height * 0.77100 - 0.11) - floor(view_container.height * 0.60078 - 0.11))
        let bottomLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        bottomLabelCGStyle.alignment = NSTextAlignment.Center
        
        let bottomLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: bottomLabelExpression)!, NSForegroundColorAttributeName: whiteRectColor, NSParagraphStyleAttributeName: bottomLabelCGStyle]
        
        NSString(string: bottomLabelText).drawInRect(bottomLabelCGRect, withAttributes: bottomLabelCGFontAttributes)
    }
    
    public class func drawSingleLabel(#singleLabelText: String, mainFrame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let topLabelColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)
        
        //// Variable Declarations
        let singleLabelSizeExpression: CGFloat = mainFrame.size.height / 4.73
        
        //// Frames
        let frame = CGRectMake(mainFrame.origin.x, mainFrame.origin.y, mainFrame.size.width, mainFrame.size.height)
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.23878 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.76115 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.97288 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.76115 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.23878 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        shapeBaseColor.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// topLabelCG Drawing
        let topLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.07007 + 0.5), view_container.minY + floor(view_container.height * 0.34044 - 0.11) + 0.61, floor(view_container.width * 0.92428 + 0.5) - floor(view_container.width * 0.07007 + 0.5), floor(view_container.height * 0.64417 - 0.11) - floor(view_container.height * 0.34044 - 0.11))
        let topLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        topLabelCGStyle.alignment = NSTextAlignment.Center
        
        let topLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: singleLabelSizeExpression)!, NSForegroundColorAttributeName: topLabelColor, NSParagraphStyleAttributeName: topLabelCGStyle]
        
        let topLabelCGTextHeight: CGFloat = NSString(string: singleLabelText).boundingRectWithSize(CGSizeMake(topLabelCGRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: topLabelCGFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, topLabelCGRect);
        NSString(string: singleLabelText).drawInRect(CGRectMake(topLabelCGRect.minX, topLabelCGRect.minY + (topLabelCGRect.height - topLabelCGTextHeight) / 2, topLabelCGRect.width, topLabelCGTextHeight), withAttributes: topLabelCGFontAttributes)
        CGContextRestoreGState(context)
    }
    
    public class func drawStopButton(#frame: CGRect) {
        //// Color Declarations
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX + 4, frame.minY + 5, floor((frame.width - 4) * 0.98545 + 3.81) - 3.31, floor((frame.height - 5) * 0.98851 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        shapeBaseColor.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// stopRect Drawing
        var stopRectPath = UIBezierPath()
        stopRectPath.moveToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70168 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70168 * view_container.width, view_container.minY + 0.69457 * view_container.height))
        stopRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.69457 * view_container.height))
        stopRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRectPath.closePath()
        whiteRectColor.setFill()
        stopRectPath.fill()
    }
    
    public class func drawPauseButton(#frame: CGRect) {
        //// Color Declarations
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        shapeBaseColor.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// whiteRect2 Drawing
        var whiteRect2Path = UIBezierPath()
        whiteRect2Path.moveToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.47048 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.47048 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.closePath()
        whiteRectColor.setFill()
        whiteRect2Path.fill()
        
        
        //// whiteRect Drawing
        var whiteRectPath = UIBezierPath()
        whiteRectPath.moveToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70000 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70000 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.closePath()
        whiteRectColor.setFill()
        whiteRectPath.fill()
    }
    
    public class func drawStartButton(#frame: CGRect) {
        //// Color Declarations
        let topLabelColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        shapeBaseColor.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.24532 * view_container.height))
        bezierPath.addCurveToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.75265 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.71897 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.75265 * view_container.height))
        bezierPath.addLineToPoint(CGPointMake(view_container.minX + 0.77579 * view_container.width, view_container.minY + 0.49366 * view_container.height))
        bezierPath.addLineToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.24532 * view_container.height))
        topLabelColor.setFill()
        bezierPath.fill()
        UIColor.blackColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }
    
    public class func drawSelectedStartButton(#frame: CGRect) {
        //// Color Declarations
        let topLabelColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let colorSelected = UIColor(red: 0.655, green: 0.062, blue: 0.062, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        colorSelected.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// Bezier Drawing
        var bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.24532 * view_container.height))
        bezierPath.addCurveToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.75265 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.71897 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.75265 * view_container.height))
        bezierPath.addLineToPoint(CGPointMake(view_container.minX + 0.77579 * view_container.width, view_container.minY + 0.49366 * view_container.height))
        bezierPath.addLineToPoint(CGPointMake(view_container.minX + 0.32200 * view_container.width, view_container.minY + 0.24532 * view_container.height))
        topLabelColor.setFill()
        bezierPath.fill()
        UIColor.blackColor().setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
    }
    
    public class func drawSelectedPauseButton(#frame: CGRect) {
        //// Color Declarations
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let colorSelected = UIColor(red: 0.655, green: 0.062, blue: 0.062, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        colorSelected.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// whiteRect2 Drawing
        var whiteRect2Path = UIBezierPath()
        whiteRect2Path.moveToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.47048 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.47048 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.30308 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRect2Path.closePath()
        whiteRectColor.setFill()
        whiteRect2Path.fill()
        
        
        //// whiteRect Drawing
        var whiteRectPath = UIBezierPath()
        whiteRectPath.moveToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70000 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.70000 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.69800 * view_container.height))
        whiteRectPath.addLineToPoint(CGPointMake(view_container.minX + 0.53721 * view_container.width, view_container.minY + 0.29270 * view_container.height))
        whiteRectPath.closePath()
        whiteRectColor.setFill()
        whiteRectPath.fill()
    }
    
    public class func drawSelectedStopButton(#frame: CGRect) {
        //// Color Declarations
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let colorSelected = UIColor(red: 0.655, green: 0.062, blue: 0.062, alpha: 1.000)
        
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX + 4, frame.minY + 5, floor((frame.width - 4) * 0.98545 + 3.81) - 3.31, floor((frame.height - 5) * 0.98851 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.23300 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97326 * view_container.width, view_container.minY + 0.75537 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76163 * view_container.width, view_container.minY + 0.96710 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.49419 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.96710 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.75537 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50057 * view_container.width, view_container.minY + 0.02127 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.02788 * view_container.width, view_container.minY + 0.23300 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.23951 * view_container.width, view_container.minY + 0.02127 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        colorSelected.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// stopRect 2 Drawing
        var stopRect2Path = UIBezierPath()
        stopRect2Path.moveToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.70168 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.70168 * view_container.width, view_container.minY + 0.69457 * view_container.height))
        stopRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.69457 * view_container.height))
        stopRect2Path.addLineToPoint(CGPointMake(view_container.minX + 0.29650 * view_container.width, view_container.minY + 0.28927 * view_container.height))
        stopRect2Path.closePath()
        whiteRectColor.setFill()
        stopRect2Path.fill()
    }
    
    public class func drawSelectedSingleLabel(#singleLabelText: String, mainFrame: CGRect) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()
        
        //// Color Declarations
        let topLabelColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeColorOverlay = UIColor(red: 0.934, green: 0.864, blue: 0.859, alpha: 1.000)
        let colorSelected = UIColor(red: 0.655, green: 0.062, blue: 0.062, alpha: 1.000)
        
        //// Variable Declarations
        let singleLabelSizeExpression: CGFloat = mainFrame.size.height / 4.73
        
        //// Frames
        let frame = CGRectMake(mainFrame.origin.x, mainFrame.origin.y, mainFrame.size.width, mainFrame.size.height)
        
        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX, frame.minY, floor((frame.width) * 0.99898 - 0.19) + 0.69, floor((frame.height) * 0.99870 + 0.5))
        
        
        //// view_container
        //// background_group
        //// colorBackground Drawing
        var colorBackgroundPath = UIBezierPath()
        colorBackgroundPath.moveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.23878 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.97952 * view_container.width, view_container.minY + 0.76115 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.76789 * view_container.width, view_container.minY + 0.97288 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.49997 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.97288 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.76115 * view_container.height))
        colorBackgroundPath.addCurveToPoint(CGPointMake(view_container.minX + 0.50684 * view_container.width, view_container.minY + 0.02705 * view_container.height), controlPoint1: CGPointMake(view_container.minX + 0.03415 * view_container.width, view_container.minY + 0.23878 * view_container.height), controlPoint2: CGPointMake(view_container.minX + 0.24578 * view_container.width, view_container.minY + 0.02705 * view_container.height))
        colorBackgroundPath.closePath()
        colorBackgroundPath.lineJoinStyle = kCGLineJoinRound;
        
        colorSelected.setFill()
        colorBackgroundPath.fill()
        shapeColorOverlay.setStroke()
        colorBackgroundPath.lineWidth = 3
        colorBackgroundPath.stroke()
        
        
        
        
        //// topLabelCG Drawing
        let topLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.07007 + 0.5), view_container.minY + floor(view_container.height * 0.34044 - 0.11) + 0.61, floor(view_container.width * 0.92428 + 0.5) - floor(view_container.width * 0.07007 + 0.5), floor(view_container.height * 0.64417 - 0.11) - floor(view_container.height * 0.34044 - 0.11))
        let topLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        topLabelCGStyle.alignment = NSTextAlignment.Center
        
        let topLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: singleLabelSizeExpression)!, NSForegroundColorAttributeName: topLabelColor, NSParagraphStyleAttributeName: topLabelCGStyle]
        
        let topLabelCGTextHeight: CGFloat = NSString(string: singleLabelText).boundingRectWithSize(CGSizeMake(topLabelCGRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: topLabelCGFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, topLabelCGRect);
        NSString(string: singleLabelText).drawInRect(CGRectMake(topLabelCGRect.minX, topLabelCGRect.minY + (topLabelCGRect.height - topLabelCGTextHeight) / 2, topLabelCGRect.width, topLabelCGTextHeight), withAttributes: topLabelCGFontAttributes)
        CGContextRestoreGState(context)
    }
    
}


