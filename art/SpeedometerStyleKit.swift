//
//  SpeedometerStyleKit.swift
//  RunnerApp
//
//  Created by Janusz Chudzynski on 2/1/15.
//  Copyright (c) 2015 izotx.com. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class SpeedometerStyleKit : NSObject {

    //// Drawing Methods

    public class func drawSpeedometer(#frame: CGRect, startPositionAngle: CGFloat, endPositionAngle: CGFloat, mainFrame: CGRect, topLabelText: String, bottomLabelText: String) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let gradientColor2 = UIColor(red: 0.576, green: 0.963, blue: 0.575, alpha: 1.000)
        let color2 = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)
        let gradientColor5 = UIColor(red: 0.915, green: 0.955, blue: 0.000, alpha: 1.000)
        let gradientColor = UIColor(red: 0.493, green: 0.723, blue: 0.960, alpha: 1.000)
        let gradientColor4 = UIColor(red: 1.000, green: 0.036, blue: 0.036, alpha: 1.000)
        let whiteRectColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let shapeBaseColor = UIColor(red: 0.462, green: 0.046, blue: 0.046, alpha: 1.000)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [gradientColor.CGColor, gradientColor.blendedColorWithFraction(0.5, ofColor: gradientColor2).CGColor, gradientColor2.CGColor, gradientColor2.blendedColorWithFraction(0.5, ofColor: gradientColor5).CGColor, gradientColor5.CGColor, gradientColor5.blendedColorWithFraction(0.5, ofColor: gradientColor4).CGColor, gradientColor4.CGColor], [0, 0.11, 0.27, 0.4, 0.7, 0.8, 0.9])

        //// Variable Declarations
        let bottomLabelExpression: CGFloat = mainFrame.size.height / 9.0
        let topLabelFontSize: CGFloat = mainFrame.size.height / 3.30


        //// Subframes
        let view_container: CGRect = CGRectMake(frame.minX + floor(frame.width * 0.02676 + 0.5), frame.minY + floor(frame.height * 0.03010 + 0.5), floor(frame.width * 0.98997 + 0.5) - floor(frame.width * 0.02676 + 0.5), floor(frame.height * 0.99331 + 0.5) - floor(frame.height * 0.03010 + 0.5))


        //// view_container
        //// Group
        //// Oval 5 Drawing
        var oval5Path = UIBezierPath(ovalInRect: CGRectMake(view_container.minX + floor(view_container.width * 0.00000 + 0.5), view_container.minY + floor(view_container.height * 0.00000 + 0.5), floor(view_container.width * 1.00000 + 0.5) - floor(view_container.width * 0.00000 + 0.5), floor(view_container.height * 1.00000 + 0.5) - floor(view_container.height * 0.00000 + 0.5)))
        color2.setFill()
        oval5Path.fill()
        UIColor.whiteColor().setStroke()
        oval5Path.lineWidth = 1
        oval5Path.stroke()


        //// Oval 3 Drawing
        let oval3Rect = CGRectMake(view_container.minX + floor(view_container.width * 0.00000 + 0.5), view_container.minY + floor(view_container.height * 0.00000 + 0.5), floor(view_container.width * 1.00000 + 0.5) - floor(view_container.width * 0.00000 + 0.5), floor(view_container.height * 1.00000 + 0.5) - floor(view_container.height * 0.00000 + 0.5))
        var oval3Path = UIBezierPath()
        oval3Path.addArcWithCenter(CGPointMake(oval3Rect.midX, oval3Rect.midY), radius: oval3Rect.width / 2, startAngle: -startPositionAngle * CGFloat(M_PI)/180, endAngle: -endPositionAngle * CGFloat(M_PI)/180, clockwise: true)
        oval3Path.addLineToPoint(CGPointMake(oval3Rect.midX, oval3Rect.midY))
        oval3Path.closePath()

        CGContextSaveGState(context)
        oval3Path.addClip()
        let oval3ResizeRatio: CGFloat = min(oval3Rect.width / 288, oval3Rect.height / 288)
        CGContextDrawRadialGradient(context, gradient,
            CGPointMake(oval3Rect.midX + -86.92 * oval3ResizeRatio, oval3Rect.midY + 57.99 * oval3ResizeRatio), 67.92 * oval3ResizeRatio,
            CGPointMake(oval3Rect.midX + -24.63 * oval3ResizeRatio, oval3Rect.midY + -21.13 * oval3ResizeRatio), 168.76 * oval3ResizeRatio,
            UInt32(kCGGradientDrawsBeforeStartLocation) | UInt32(kCGGradientDrawsAfterEndLocation))
        CGContextRestoreGState(context)
        UIColor.whiteColor().setStroke()
        oval3Path.lineWidth = 1
        oval3Path.stroke()


        //// Oval 4 Drawing
        var oval4Path = UIBezierPath(ovalInRect: CGRectMake(view_container.minX + floor(view_container.width * 0.04167 + 0.5), view_container.minY + floor(view_container.height * 0.04167 + 0.5), floor(view_container.width * 0.95833 + 0.5) - floor(view_container.width * 0.04167 + 0.5), floor(view_container.height * 0.95833 + 0.5) - floor(view_container.height * 0.04167 + 0.5)))
        shapeBaseColor.setFill()
        oval4Path.fill()
        UIColor.whiteColor().setStroke()
        oval4Path.lineWidth = 1
        oval4Path.stroke()




        //// topLabelCG Drawing
        let topLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.07292 + 0.5), view_container.minY + floor(view_container.height * 0.21875 + 0.5), floor(view_container.width * 0.93056 + 0.5) - floor(view_container.width * 0.07292 + 0.5), floor(view_container.height * 0.61458 + 0.5) - floor(view_container.height * 0.21875 + 0.5))
        let topLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        topLabelCGStyle.alignment = NSTextAlignment.Center

        let topLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: topLabelFontSize)!, NSForegroundColorAttributeName: whiteRectColor, NSParagraphStyleAttributeName: topLabelCGStyle]

        let topLabelCGTextHeight: CGFloat = NSString(string: topLabelText).boundingRectWithSize(CGSizeMake(topLabelCGRect.width, CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: topLabelCGFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, topLabelCGRect);
        NSString(string: topLabelText).drawInRect(CGRectMake(topLabelCGRect.minX, topLabelCGRect.minY + (topLabelCGRect.height - topLabelCGTextHeight) / 2, topLabelCGRect.width, topLabelCGTextHeight), withAttributes: topLabelCGFontAttributes)
        CGContextRestoreGState(context)


        //// bottomLabelCG Drawing
        let bottomLabelCGRect = CGRectMake(view_container.minX + floor(view_container.width * 0.18403 + 0.5), view_container.minY + floor(view_container.height * 0.61458 + 0.5), floor(view_container.width * 0.82639 + 0.5) - floor(view_container.width * 0.18403 + 0.5), floor(view_container.height * 0.78472 + 0.5) - floor(view_container.height * 0.61458 + 0.5))
        let bottomLabelCGStyle = NSMutableParagraphStyle.defaultParagraphStyle().mutableCopy() as NSMutableParagraphStyle
        bottomLabelCGStyle.alignment = NSTextAlignment.Center

        let bottomLabelCGFontAttributes = [NSFontAttributeName: UIFont(name: "Helvetica", size: bottomLabelExpression)!, NSForegroundColorAttributeName: whiteRectColor, NSParagraphStyleAttributeName: bottomLabelCGStyle]

        NSString(string: bottomLabelText).drawInRect(bottomLabelCGRect, withAttributes: bottomLabelCGFontAttributes)
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}

@objc protocol StyleKitSettableImage {
    func setImage(image: UIImage!)
}

@objc protocol StyleKitSettableSelectedImage {
    func setSelectedImage(image: UIImage!)
}
